import { toImageData, applyColormap, sobelEdge, waitForOpenCV } from '../utils.js'; import { Debug } from '../debug.js'; import { TaskManager } from '../taskmanager.js'; import { getCurrentImage } from './original.js'; export function initHeatmap(){ const canvas=document.getElementById('heatmap-canvas'); const ctx=canvas.getContext('2d'); const colormap=document.getElementById('colormap'); const slider=document.getElementById('edge-sensitivity'); async function regen(){ const img=getCurrentImage(); if(!img) return; const imgData=toImageData(img,1024); canvas.width=imgData.width; canvas.height=imgData.height; try{ const cv=await waitForOpenCV(2000); const src=cv.imread(img); const gray=new cv.Mat(); cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY); const edges=new cv.Mat(); cv.Canny(gray, edges, Number(slider.value), Number(slider.value)*2); const imgData2=new ImageData(new Uint8ClampedArray(edges.data), edges.cols, edges.rows); const mapped=applyColormap(imgData2, colormap.value); ctx.putImageData(mapped,0,0); src.delete(); gray.delete(); edges.delete(); }catch(e){ const edges=sobelEdge(imgData, Number(slider.value)); const mapped=applyColormap(edges, colormap.value); ctx.putImageData(mapped,0,0); } Debug.log('Heatmap regenerated'); } colormap.addEventListener('change',()=>TaskManager.add(regen,'heatmap-regen')); slider.addEventListener('input',()=>TaskManager.add(regen,'heatmap-regen')); window.CncAi=window.CncAi||{}; window.CncAi.regenerateHeatmap=()=>TaskManager.add(regen,'heatmap-regen'); }