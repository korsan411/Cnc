import { toImageData } from '../utils.js'; import { generateRasterGcode, generateContourGcode, downloadGcode } from '../machine.js'; import { Debug } from '../debug.js'; import { TaskManager } from '../taskmanager.js'; import { getCurrentImage } from './original.js'; function findContoursSimple(imgData, thresh=100){ const w=imgData.width,h=imgData.height; const gray=new Uint8ClampedArray(w*h); for(let i=0;i<w*h;i++) gray[i]=Math.round(0.299*imgData.data[i*4]+0.587*imgData.data[i*4+1]+0.114*imgData.data[i*4+2]); const mask=new Uint8Array(w*h); for(let i=0;i<w*h;i++) mask[i]= gray[i]>thresh?255:0; const visited=new Uint8Array(w*h); const contours=[]; function flood(sx,sy){ const stack=[[sx,sy]]; const pts=[]; while(stack.length){ const [x,y]=stack.pop(); if(x<0||y<0||x>=w||y>=h) continue; const idx=y*w+x; if(visited[idx]||mask[idx]===0) continue; visited[idx]=1; pts.push({x,y}); stack.push([x+1,y]);stack.push([x-1,y]);stack.push([x,y+1]);stack.push([x,y-1]); } return pts; } for(let y=0;y<h;y++) for(let x=0;x<w;x++){ const idx=y*w+x; if(!visited[idx] && mask[idx]){ const pts=flood(x,y); if(pts.length>50){ let minx=Infinity,miny=Infinity,maxx=0,maxy=0; for(const p of pts){ if(p.x<minx)minx=p.x; if(p.y<miny)miny=p.y; if(p.x>maxx)maxx=p.x; if(p.y>maxy)maxy=p.y; } contours.push([{x:minx,y:miny},{x:maxx,y:miny},{x:maxx,y:maxy},{x:minx,y:maxy}]); } } } return contours; } export function initContour(){ const btnRaster=document.getElementById('generate-raster'); const btnContour=document.getElementById('generate-contour'); const dl=document.getElementById('download-gcode'); const canvas=document.getElementById('contour-canvas'); const ctx=canvas.getContext('2d'); btnRaster.addEventListener('click',()=>{ TaskManager.add(async ()=>{ const img=getCurrentImage(); if(!img) return; const imgData=toImageData(img,1024); const g=generateRasterGcode(imgData.width, imgData.height, 5, 1, {x:0,y:0}); downloadGcode(g,'raster.gcode'); Debug.log('Raster G-code generated'); },'gcode-raster'); }); btnContour.addEventListener('click',()=>{ TaskManager.add(async ()=>{ const img=getCurrentImage(); if(!img) return; const imgData=toImageData(img,1024); const contours=findContoursSimple(imgData,100); const g=generateContourGcode(contours,1,{x:0,y:0}); downloadGcode(g,'contour.gcode'); Debug.log('Contour G-code generated: '+contours.length+' contours'); canvas.width=imgData.width; canvas.height=imgData.height; ctx.clearRect(0,0,canvas.width,canvas.height); ctx.strokeStyle='red'; ctx.lineWidth=1; for(const c of contours){ ctx.beginPath(); ctx.moveTo(c[0].x,c[0].y); for(let i=1;i<c.length;i++) ctx.lineTo(c[i].x,c[i].y); ctx.closePath(); ctx.stroke(); } },'gcode-contour'); }); }