export function toImageData(img, maxW=1024){ const c=document.createElement('canvas'); const ctx=c.getContext('2d'); const scale=Math.min(1, maxW/img.width); c.width=Math.round(img.width*scale); c.height=Math.round(img.height*scale); ctx.drawImage(img,0,0,c.width,c.height); return ctx.getImageData(0,0,c.width,c.height); } export function applyColormap(imageData, colormap='jet'){ const w=imageData.width,h=imageData.height; const out=new ImageData(w,h); const map=getColormap(colormap); for(let i=0;i<w*h;i++){ const r=imageData.data[i*4], g=imageData.data[i*4+1], b=imageData.data[i*4+2]; const v=Math.round(0.299*r+0.587*g+0.114*b); const [nr,ng,nb]=map[v]; out.data[i*4]=nr; out.data[i*4+1]=ng; out.data[i*4+2]=nb; out.data[i*4+3]=255; } return out; } function getColormap(name){ const cm=new Array(256); if(name==='gray'){ for(let i=0;i<256;i++) cm[i]=[i,i,i]; return cm;} for(let i=0;i<256;i++){ const v=i/255; const r=Math.round(255*Math.max(Math.min(1.5-4*Math.abs(v-0.75),1),0)); const g=Math.round(255*Math.max(Math.min(1.5-4*Math.abs(v-0.5),1),0)); const b=Math.round(255*Math.max(Math.min(1.5-4*Math.abs(v-0.25),1),0)); cm[i]=[r,g,b]; } if(name==='hot'){ for(let i=0;i<256;i++){ cm[i]=[Math.min(255,i*2), Math.min(255, Math.max(0,i*2-128)), Math.min(255, Math.max(0,i*2-256))]; } } if(name==='cool'){ for(let i=0;i<256;i++){ cm[i]=[Math.round(255*(1 - i/255)), Math.round(255*(i/255)), 255]; } } return cm; } export function sobelEdge(imageData, threshold=100){ const w=imageData.width,h=imageData.height; const out=new ImageData(w,h); const gray=new Uint8ClampedArray(w*h); for(let i=0;i<w*h;i++) gray[i]=Math.round(0.299*imageData.data[i*4]+0.587*imageData.data[i*4+1]+0.114*imageData.data[i*4+2]); const gx=[-1,0,1,-2,0,2,-1,0,1], gy=[-1,-2,-1,0,0,0,1,2,1]; for(let y=1;y<h-1;y++) for(let x=1;x<w-1;x++){ let sx=0, sy=0, idx=0; for(let ky=-1;ky<=1;ky++) for(let kx=-1;kx<=1;kx++){ const p=gray[(y+ky)*w+(x+kx)]; sx += p*gx[idx]; sy += p*gy[idx]; idx++; } const mag = Math.hypot(sx,sy); const v = mag>threshold?255:0; const pi=(y*w+x)*4; out.data[pi]=out.data[pi+1]=out.data[pi+2]=v; out.data[pi+3]=255; } return out; } export function waitForOpenCV(timeout=10000){ return new Promise((resolve,reject)=>{ const start=Date.now(); (function check(){ if(window.cv && window.cv.Mat){ resolve(window.cv); } else if(Date.now()-start>timeout){ reject(new Error('OpenCV not available')); } else setTimeout(check,200); } )(); }); }